package vn.com.iuh.fit.product_service.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import vn.com.iuh.fit.product_service.dto.ProductRequest;
import vn.com.iuh.fit.product_service.dto.ProductResponse;
import vn.com.iuh.fit.product_service.entity.Product;
import vn.com.iuh.fit.product_service.entity.Category;
import vn.com.iuh.fit.product_service.entity.ProductDocument;
import vn.com.iuh.fit.product_service.entity.ProductImage;
import vn.com.iuh.fit.product_service.repository.CategoryRepository;
import vn.com.iuh.fit.product_service.repository.ProductElasticsearchRepository;
import vn.com.iuh.fit.product_service.repository.ProductRepository;
import vn.com.iuh.fit.product_service.repository.ProductImageRepository;
import vn.com.iuh.fit.product_service.service.FileStorageService;
import vn.com.iuh.fit.product_service.service.ProductService;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class ProductServiceImpl implements ProductService {

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private FileStorageService fileStorageService;

    @Autowired
    private ProductImageRepository productImageRepository;

    @Autowired
    private ProductElasticsearchRepository productElasticsearchRepository;

    // 1 L·∫§Y DANH S√ÅCH S·∫¢N PH·∫®M
    @Override
    public List<ProductResponse> getAllProducts() {
        return productRepository.findAll()
                .stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    @Override
    public ProductResponse getProductById(Long id) {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Product not found"));
        return convertToResponse(product);
    }

    // 2 TH√äM S·∫¢N PH·∫®M (H·ªñ TR·ª¢ NHI·ªÄU ·∫¢NH)
    @Override
    public ProductResponse addProductWithImages(ProductRequest productRequest, List<MultipartFile> imageFiles) throws Exception {
        // üîπ L·∫•y danh m·ª•c t·ª´ DB
        Category category = categoryRepository.findById(productRequest.getCategoryId())
                .orElseThrow(() -> new RuntimeException("Category not found"));

        // üîπ T·∫°o s·∫£n ph·∫©m m·ªõi
        Product product = Product.builder()
                .name(productRequest.getName())
                .description(productRequest.getDescription())
                .price(productRequest.getPrice())
                .category(category)
                .build();

        // üîπ L∆∞u s·∫£n ph·∫©m v√†o MySQL
        product = productRepository.save(product);

        // üîπ Upload ·∫£nh l√™n MinIO & l∆∞u v√†o `ProductImage`
        List<String> imageUrls = fileStorageService.uploadFiles(imageFiles);
        List<ProductImage> imageEntities = new ArrayList<>();

        for (String imageUrl : imageUrls) {
            ProductImage productImage = new ProductImage(null, imageUrl, product);
            imageEntities.add(productImageRepository.save(productImage));
        }

        // üîπ C·∫≠p nh·∫≠t danh s√°ch h√¨nh ·∫£nh v√†o s·∫£n ph·∫©m
        product.setImages(imageEntities);

        // ‚úÖ C·∫≠p nh·∫≠t v√†o Elasticsearch (L∆∞u c·∫£ danh s√°ch ·∫£nh)
        ProductDocument productDocument = ProductDocument.builder()
                .id(product.getId())
                .name(product.getName())
                .description(product.getDescription())
                .price(product.getPrice())
                .categoryId(product.getCategory().getId()) // ‚úÖ L∆∞u categoryId
                .imageUrls(imageUrls) // ‚úÖ L∆∞u danh s√°ch ·∫£nh
                .build();

        productElasticsearchRepository.save(productDocument);

        return convertToResponse(product);
    }


    // 3 C·∫¨P NH·∫¨T S·∫¢N PH·∫®M (THAY ·∫¢NH M·ªöI)
    @Override
    public ProductResponse updateProductWithImages(Long id, ProductRequest productRequest, List<MultipartFile> imageFiles) throws Exception {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Product not found"));

        Category category = categoryRepository.findById(productRequest.getCategoryId())
                .orElseThrow(() -> new RuntimeException("Category not found"));

        product.setName(productRequest.getName());
        product.setDescription(productRequest.getDescription());
        product.setPrice(productRequest.getPrice());
        product.setCategory(category);

        product = productRepository.save(product);

        if (imageFiles != null && !imageFiles.isEmpty()) {
            // X√≥a ·∫£nh c≈© kh·ªèi MinIO
            List<ProductImage> existingImages = productImageRepository.findByProductId(id);
            List<String> oldUrls = existingImages.stream().map(ProductImage::getImageUrl).toList();

            fileStorageService.deleteFiles(oldUrls);
            productImageRepository.deleteAll(existingImages);

            // Upload ·∫£nh m·ªõi
            List<String> newImageUrls = fileStorageService.uploadFiles(imageFiles);
            for (String imageUrl : newImageUrls) {
                productImageRepository.save(new ProductImage(null, imageUrl, product));
            }
        }

        return convertToResponse(product);
    }

    // 4 XO√Å S·∫¢N PH·∫®M (XO√Å C·∫¢ ·∫¢NH)
    @Override
    public void deleteProduct(Long id) throws Exception {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Product not found"));

        // L·∫•y danh s√°ch ·∫£nh c·ªßa s·∫£n ph·∫©m
        List<ProductImage> images = productImageRepository.findByProductId(id);
        List<String> imageUrls = images.stream().map(ProductImage::getImageUrl).toList();

        // X√≥a ·∫£nh kh·ªèi b·ªô l∆∞u tr·ªØ
        fileStorageService.deleteFiles(imageUrls);
        productImageRepository.deleteAll(images);

        // X√≥a d·ªØ li·ªáu s·∫£n ph·∫©m kh·ªèi Elasticsearch
        productElasticsearchRepository.deleteById(id);

        // X√≥a s·∫£n ph·∫©m kh·ªèi MySQL
        productRepository.deleteById(id);
    }

    // 5 L·ªåC S·∫¢N PH·∫®M
    @Override
    public List<ProductResponse> getProductsByCategory(Long categoryId) {
        return productElasticsearchRepository.findByCategoryId(categoryId)
                .stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    @Override
    public List<ProductResponse> filterProductsByPrice(double minPrice, double maxPrice) {
        List<ProductDocument> products = productElasticsearchRepository.findByPriceBetween(minPrice, maxPrice);

        return products.stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    private ProductResponse convertToResponse(ProductDocument productDocument) {
        return ProductResponse.builder()
                .id(productDocument.getId())
                .name(productDocument.getName())
                .description(productDocument.getDescription())
                .price(productDocument.getPrice())
                .categoryId(productDocument.getCategoryId()) // ‚úÖ L·∫•y categoryId thay v√¨ categoryName
                .imageUrls(productDocument.getImageUrls()) // ‚úÖ L·∫•y danh s√°ch ·∫£nh t·ª´ Elasticsearch
                .build();
    }


    @Override
    public List<ProductResponse> searchProducts(String keyword) {
        List<ProductDocument> productDocuments = productElasticsearchRepository.findByNameContainingIgnoreCase(keyword);
        return productDocuments.stream()
                .map(doc -> ProductResponse.builder()
                        .id(doc.getId())
                        .name(doc.getName())
                        .description(doc.getDescription())
                        .price(doc.getPrice())
                        .categoryId(doc.getCategoryId()) // ‚úÖ Th√™m categoryId
                        .imageUrls(doc.getImageUrls())   // ‚úÖ Th√™m danh s√°ch imageUrls
                        .build())
                .collect(Collectors.toList());
    }


    // 6 PH√ÇN TRANG & S·∫ÆP X·∫æP
    @Override
    public List<ProductResponse> getPagedProducts(int page, int size) {
        return productRepository.findAll()
                .stream()
                .skip((long) (page - 1) * size)
                .limit(size)
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    @Override
    public List<ProductResponse> getLatestProducts(int limit) {
        return productRepository.findTopByOrderByIdDesc()
                .stream()
                .limit(limit)
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    @Override
    public List<ProductResponse> getBestSellingProducts(int limit) {
        throw new UnsupportedOperationException("Best selling products should be fetched from Inventory-Service.");
    }

    // 7 CHUY·ªÇN ƒê·ªîI ENTITY ‚Üí DTO
    public ProductResponse convertToResponse(Product product) {
        List<String> imageUrls = product.getImages() != null ?
                product.getImages().stream()
                        .map(ProductImage::getImageUrl)
                        .collect(Collectors.toList())
                : new ArrayList<>(); // Tr√°nh l·ªói NullPointerException

        return ProductResponse.builder()
                .id(product.getId())
                .name(product.getName())
                .description(product.getDescription())
                .price(product.getPrice())
                .categoryId(product.getCategory().getId())
                .imageUrls(imageUrls)
                .build();
    }

}
