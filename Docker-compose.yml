
########################################################################################

version: "3.8"

services:  # 1. Eureka Service
  eureka-service:
    container_name: eureka-service
    build:
      context: ./eureka-service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - microservice-net

  # 2. API Gateway
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    depends_on:
      - eureka-service
      - redis
    environment:
      EUREKA_INSTANCE_HOSTNAME: api-gateway
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    networks:
      - microservice-net

  # 3. Auth Service
  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - eureka-service
      - mysql
    restart: on-failure
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/auth_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: auth-service
      JWT_SECRET: z6NcAZXi9+HYC6ByT+uG+73PdgAHQomW0s7EnpAY+Ns=
      JWT_ACCESS_TOKEN_EXPIRATION: 604800000
      JWT_REFRESH_TOKEN_EXPIRATION: 604800000
    networks:
      - microservice-net

  # 4. Product Service
  product-service:
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      - eureka-service
      - mysql
      - minio
      - elasticsearch
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/musicstore?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: product-service
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: musicstore
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
    networks:
      - microservice-net

  # 5. Cart Service
  cart-service:
    container_name: cart-service
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      - eureka-service
      - redis
    environment:
      SPRING_APPLICATION_NAME: cart-service
      SERVER_PORT: 8085
      SPRING_AUTOCONFIGURE_EXCLUDE: org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD:
      SPRING_DATA_REDIS_TIMEOUT: 60s
      SPRING_DATA_REDIS_DATABASE: 0
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: cart-service
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: cart-service-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
    networks:
      - microservice-net

  # 7. Inventory Service
  inventory-service:
    container_name: inventory-service
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      - eureka-service
      - mysql
    restart: on-failure
    environment:
      SPRING_APPLICATION_NAME: inventory-service
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/inventory_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: inventory-service
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: inventory-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
    networks:
      - microservice-net

  # 8. User Service
  user-service:
    container_name: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - eureka-service
      - mysql
      - minio
    restart: on-failure
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/user_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: user-service
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: user-avatars
    networks:
      - microservice-net

  # 9. MySQL Database
  mysql:
    container_name: mysql
    image: mysql:8.0
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservice-net
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-ppassword" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # 10. MinIO
  minio:
    container_name: minio
    image: minio/minio:latest
    ports:
      - "9001:9000"  # Đổi mapping từ 9000:9000 thành 9001:9000
      - "9090:9090"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9090"
    volumes:
      - minio_data:/data
    networks:
      - microservice-net

  # 11. Redis
  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservice-net
  # 12. Order Service
  order-service:
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    depends_on:
      - eureka-service
      - mysql
      - kafka
    restart: on-failure
    environment:
      SPRING_APPLICATION_NAME: order-service
      SERVER_PORT: 8086
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/order_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: order-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: order-service
    networks:
      - microservice-net

  # 13.Payment Service
  payment-service:
    container_name: payment-service
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    depends_on:
      - eureka-service
      - mysql
      - kafka
    restart: on-failure
    environment:
      SPRING_APPLICATION_NAME: payment-service
      SERVER_PORT: 8087
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/payment_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: payment-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: payment-service
    env_file:
      - .env
    networks:
      - microservice-net

  # 14. Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.2.2
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservice-net
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092" ]
      interval: 10s
      retries: 5
  # 15. Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - microservice-net
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 10s
      retries: 5
  # 16. Kafka UI
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "9002:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
    networks:
      - microservice-net
  # 17. Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # Tắt bảo mật để dễ dàng thử nghiệm
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - microservice-net
  # 18. Kibana
  kibana:
#    image: docker.elastic.co/kibana/kibana:8.12.0
    image: elastic/kibana:8.12.0
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - microservice-net
  # 19. Notification Service
  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    depends_on:
      - eureka-service
      - kafka
      - mongo
    restart: on-failure
    environment:
      SPRING_APPLICATION_NAME: notification-service
      SERVER_PORT: 8088
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: notification-service
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/notification_db
    networks:
      - microservice-net
  # 20. MongoDB for Notification Service
  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - microservice-net
  # 21. Review Service
  review-service:
    container_name: review-service
    build:
      context: ./review-service
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    depends_on:
      - eureka-service
      - mongo
    restart: on-failure
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/review_db
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: review-service
    networks:
      - microservice-net


  # 21.Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.0
    container_name: logstash
    volumes:
      - ./observability/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - microservice-net
  # 22.Prometheus
  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"
    networks:
      - microservice-net
  # 23.Tempo
  tempo:
    image: grafana/tempo:2.3.1
    container_name: tempo
    volumes:
      - ./observability/tempo/tempo.yaml:/etc/tempo.yaml
    command: [ "--config.file=/etc/tempo.yaml" ]
    ports:
      - "3200:3200"   # HTTP UI
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    networks:
      - microservice-net
  # 24.Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3002:3000"
    volumes:
      - ./observability/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./observability/grafana/provisioning/:/etc/grafana/provisioning/
    depends_on:
      - prometheus
      - tempo
      - elasticsearch
    networks:
      - microservice-net
  # 25.Jenkins
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    user: root
    ports:
      - "8099:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - microservice-net

#  ai-service:
#    container_name: ai-service
#    build:
#      context: ./ai-service
#      dockerfile: Dockerfile
#    ports:
#      - "8000:8000"
#      - "50051:50051"
#    depends_on:
#      - product-service
#    volumes:
#      - huggingface_cache:/app/.cache
#    networks:
#      - microservice-net
#    restart: on-failure

volumes:
  redis-data:
    driver: local
  mysql_data:
  minio_data:
  mongo_data:
  huggingface_cache:
  jenkins_home:

networks:
  microservice-net:

#Eureka Dashboard: http://localhost:8761
#API Gateway: http://localhost:9000
#Prometheus Metrics: http://localhost:9091
#Grafana UI: http://localhost:3002 (user: admin / pass: admin)
#Tempo Trace Viewer (via Grafana Explore tab): http://localhost:3002/explore
#Kibana Logs UI: http://localhost:5601
#Kafka UI (Kafdrop): http://localhost:9002
#MinIO UI: http://localhost:9001 (user: minioadmin, pass: minioadmin)
#MinIO Console (Admin UI): http://localhost:9090 (user: minioadmin, pass: minioadmin)
#MySQL Admin CLI: docker exec -it mysql mysql -u root -ppassword
#Redis CLI: docker exec -it redis redis-cli

