package vn.com.iuh.fit.user_service.service;

import io.minio.*;
import io.minio.errors.MinioException;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.InputStream;
import java.net.URI;
import java.util.UUID;

@Service
public class MinioService {
    private static final Logger logger = LoggerFactory.getLogger(MinioService.class);

    private final MinioClient minioClient;
    private final String bucketName;
    private final String minioUrl;

    public MinioService(
            MinioClient minioClient,
            @Value("${minio.bucket-name}") String bucketName,
            @Value("${minio.url}") String minioUrl) {  // üõ† Th√™m @Value
        this.minioClient = minioClient;
        this.bucketName = bucketName;
        this.minioUrl = minioUrl;

        logger.info("üîç MinIO URL initialized: {}", this.minioUrl);
    }

    // üìå Ki·ªÉm tra bucket khi service kh·ªüi ƒë·ªông
    @PostConstruct
    public void init() {
        try {
            initializeBucket();
            logger.info("‚úÖ MinIO bucket check completed successfully!");
        } catch (Exception e) {
            logger.error("‚ùå MinIO bucket initialization failed: {}", e.getMessage());
        }
    }

    /**
     * üìå Ki·ªÉm tra v√† t·∫°o bucket n·∫øu ch∆∞a t·ªìn t·∫°i.
     */
    private void initializeBucket() {
        try {
            boolean isExist = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());
            if (!isExist) {
                minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());
                logger.info("‚úÖ Bucket '{}' created successfully.", bucketName);
            } else {
                logger.info("‚ÑπÔ∏è Bucket '{}' already exists.", bucketName);
            }
        } catch (Exception e) {
            throw new RuntimeException("‚ùå Error checking bucket existence: " + e.getMessage(), e);
        }
    }

    /**
     * üìå Upload file l√™n MinIO v√† tr·∫£ v·ªÅ URL ƒë·∫ßy ƒë·ªß.
     */
    public String uploadFile(MultipartFile file) {
        try {
            // T·∫°o t√™n file duy nh·∫•t b·∫±ng UUID
            String fileExtension = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."));
            String uniqueFileName = UUID.randomUUID().toString() + fileExtension;

            // Upload file l√™n MinIO
            InputStream inputStream = file.getInputStream();
            minioClient.putObject(
                    PutObjectArgs.builder()
                            .bucket(bucketName)
                            .object(uniqueFileName)
                            .stream(inputStream, file.getSize(), -1)
                            .contentType(file.getContentType())
                            .build());

            // Tr·∫£ v·ªÅ URL ch√≠nh x√°c
            String fileUrl = "http://127.0.0.1:9001" + "/" + bucketName + "/" + uniqueFileName;
            logger.info("‚úÖ File uploaded successfully: {}", fileUrl);

            return fileUrl;

        } catch (MinioException e) {
            logger.error("‚ùå MinIO error: {}", e.getMessage());
            throw new RuntimeException("‚ùå MinIO error: " + e.getMessage(), e);
        } catch (Exception e) {
            logger.error("‚ùå Error uploading file: {}", e.getMessage());
            throw new RuntimeException("‚ùå Error uploading file: " + e.getMessage(), e);
        }
    }

    /**
     * üìå X√≥a file t·ª´ MinIO.
     */
    public void deleteFile(String fileUrl) {
        try {
            // Ki·ªÉm tra URL h·ª£p l·ªá
            if (fileUrl == null || fileUrl.isEmpty()) {
                logger.warn("‚ö†Ô∏è File URL is empty or null, skipping delete.");
                return;
            }

            // L·∫•y t√™n file t·ª´ URL
            String fileName;
            try {
                fileName = new URI(fileUrl).getPath().replaceFirst(".*/", "");
            } catch (Exception e) {
                logger.error("‚ùå Invalid file URL: {}", fileUrl);
                throw new RuntimeException("‚ùå Invalid file URL: " + fileUrl, e);
            }

            // Ki·ªÉm tra n·∫øu fileName r·ªóng (tr√°nh l·ªói MinIO)
            if (fileName.isEmpty()) {
                logger.warn("‚ö†Ô∏è Extracted file name is empty, skipping delete.");
                return;
            }

            // G·ª≠i y√™u c·∫ßu x√≥a file ƒë·∫øn MinIO
            minioClient.removeObject(
                    RemoveObjectArgs.builder()
                            .bucket(bucketName)
                            .object(fileName)
                            .build());
            logger.info("‚úÖ File '{}' deleted successfully.", fileName);

        } catch (Exception e) {
            logger.error("‚ùå Error deleting file '{}': {}", fileUrl, e.getMessage());
            throw new RuntimeException("‚ùå Error deleting file: " + fileUrl, e);
        }
    }

}
